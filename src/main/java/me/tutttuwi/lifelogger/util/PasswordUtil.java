package me.tutttuwi.lifelogger.util;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
import com.opensymphony.xwork2.ActionSupport;
import me.tutttuwi.lifelogger.constants.PropKey;

public class PasswordUtil extends ActionSupport {

  /** Argorythm. */
  private static final String ALGORITHM = "PBKDF2WithHmacSHA256";
  /** Streching. */
  private static final int ITERATION_COUNT = 1;
  /** Key Length. */
  private static final int KEY_LENGTH = 256;
  /** Key Length. */
  private static final String SALT = new ActionSupport().getText(PropKey.PASS_SALT.KEY);

  /**
   * Generate Password.
   *
   * @param password - plain password
   * @return safe password
   */
  public static String getSafetyPassword(String password) {

    char[] passCharAry = password.toCharArray();
    byte[] hashedSalt = getHashedSalt(SALT);

    PBEKeySpec keySpec = new PBEKeySpec(passCharAry, hashedSalt, ITERATION_COUNT, KEY_LENGTH);

    SecretKeyFactory skf;
    try {
      skf = SecretKeyFactory.getInstance(ALGORITHM);
    } catch (NoSuchAlgorithmException e) {
      throw new RuntimeException(e);
    }

    SecretKey secretKey;
    try {
      secretKey = skf.generateSecret(keySpec);
    } catch (InvalidKeySpecException e) {
      throw new RuntimeException(e);
    }
    byte[] passByteAry = secretKey.getEncoded();

    // Convert the generated byte array to a hexadecimal string
    StringBuilder sb = new StringBuilder(64);
    for (byte b : passByteAry) {
      sb.append(String.format("%02x", b & 0xff));
    }
    return sb.toString();
  }

  /**
   * Hash salt by SHA256.
   *
   * @param salt - SALT
   * @return byte array of salt hashed
   */
  private static byte[] getHashedSalt(String salt) {
    MessageDigest messageDigest;
    try {
      messageDigest = MessageDigest.getInstance("SHA-256");
    } catch (NoSuchAlgorithmException e) {
      throw new RuntimeException(e);
    }
    messageDigest.update(salt.getBytes());
    return messageDigest.digest();
  }
}
